{"version":3,"sources":["utils/three.js","assets/arrow-left.svg","assets/arrow-right.svg","components/Carousel/index.js","components/Carousel/carouselShader.js"],"names":["cleanScene","scene","traverse","object","isMesh","geometry","dispose","material","isMaterial","cleanMaterial","key","Object","keys","value","cleanRenderer","renderer","forceContextLoss","removeLights","lights","light","parent","remove","_extends","assign","target","i","arguments","length","source","prototype","hasOwnProperty","call","apply","this","_ref","d","SvgArrowLeft","title","titleId","props","svgRef","fill","width","height","viewBox","ref","id","ForwardRef","SvgArrowRight","determineIndex","imageIndex","index","images","direction","Carousel","placeholder","rest","dragging","setDragging","useState","setImageIndex","loaded","setLoaded","showPlaceholder","setShowPlaceholder","textures","setTextures","canvasRect","setCanvasRect","canvas","useRef","imagePlane","camera","animating","swipeDirection","lastSwipePosition","scheduledAnimationFrame","prefersReducedMotion","usePrefersReducedMotion","inViewport","useInViewport","placeholderRef","springTween","swipeElement","currentImageAlt","alt","useEffect","document","body","style","cursor","cameraOptions","current","WebGLRenderer","antialias","powerPreference","OrthographicCamera","Scene","setPixelRatio","setClearColor","setSize","domElement","background","Color","position","z","mounted","async","textureLoader","TextureLoader","anisotropy","capabilities","getMaxAnisotropy","texturePromises","map","imageSrc","getImageFromSrcSet","image","imageTexture","loadAsync","initTexture","encoding","sRGBEncoding","minFilter","LinearFilter","magFilter","generateMipmaps","Promise","all","ShaderMaterial","uniforms","dispFactor","type","currentImage","nextImage","vertexShader","fragmentShader","transparent","opacity","PlaneBufferGeometry","Mesh","set","add","requestAnimationFrame","render","loadImages","goToIndex","useCallback","onComplete","springValue","spring","from","get","to","velocity","getVelocity","stiffness","damping","start","navigate","cancelAnimationFrame","finalIndex","onNavClick","handleResize","rect","getBoundingClientRect","window","addEventListener","removeEventListener","animation","animate","stop","purgePlaceholder","placeholderElement","onSwipeMove","x","absoluteX","Math","abs","containerWidth","swipePercentage","nextIndex","displacementClamp","min","max","onSwipeEnd","duration","minSwipeDistance","pointerTracker","swipeXY","y","swipeStart","listen","event","preventDefault","pointer","swipeEnd","className","onKeyDown","selectedAction","ArrowRight","ArrowLeft","classNames","aria-atomic","aria-live","aria-label","role","aria-hidden","prerender","src","onClick","onMouseUp","blurOnMouseUp","aria-pressed"],"mappings":"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","file":"static/js/11.76032881.chunk.js","sourcesContent":["/**\r\n * Clean up a scene's materials and geometry\r\n */\r\nexport const cleanScene = scene => {\r\n  scene.traverse(object => {\r\n    if (!object.isMesh) return;\r\n\r\n    object.geometry.dispose();\r\n\r\n    if (object.material.isMaterial) {\r\n      cleanMaterial(object.material);\r\n    } else {\r\n      for (const material of object.material) {\r\n        cleanMaterial(material);\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Clean up and dispose of a material\r\n */\r\nexport const cleanMaterial = material => {\r\n  material.dispose();\r\n\r\n  for (const key of Object.keys(material)) {\r\n    const value = material[key];\r\n    if (value && typeof value === 'object' && 'minFilter' in value) {\r\n      value.dispose();\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Clean up and dispose of a renderer\r\n */\r\nexport const cleanRenderer = renderer => {\r\n  renderer.dispose();\r\n  renderer.forceContextLoss();\r\n  renderer = null;\r\n};\r\n\r\n/**\r\n * Clean up lights by removing them from their parent\r\n */\r\nexport const removeLights = lights => {\r\n  for (const light of lights) {\r\n    light.parent.remove(light);\r\n  }\r\n};\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M18.03 1.375L16.47.125-.031 20.75l16.5 20.625 1.562-1.25L2.53 20.75z\"\n});\n\nfunction SvgArrowLeft({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"currentColor\",\n    width: 18,\n    height: 42,\n    viewBox: \"0 0 18 42\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref);\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgArrowLeft);\nexport default __webpack_public_path__ + \"static/media/arrow-left.6b3ad85e.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M-.03 1.375L1.53.125l16.5 20.625-16.5 20.625-1.562-1.25 15.5-19.375z\"\n});\n\nfunction SvgArrowRight({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"currentColor\",\n    width: 18,\n    height: 42,\n    viewBox: \"0 0 18 42\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref);\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgArrowRight);\nexport default __webpack_public_path__ + \"static/media/arrow-right.b653b2d6.svg\";\nexport { ForwardRef as ReactComponent };","import { useState, useEffect, useRef, useCallback } from 'react';\r\nimport {\r\n  WebGLRenderer,\r\n  LinearFilter,\r\n  OrthographicCamera,\r\n  Scene,\r\n  PlaneBufferGeometry,\r\n  TextureLoader,\r\n  ShaderMaterial,\r\n  Mesh,\r\n  Color,\r\n  sRGBEncoding,\r\n} from 'three';\r\nimport { spring, value, listen, pointer } from 'popmotion';\r\nimport classNames from 'classnames';\r\nimport { usePrefersReducedMotion, useInViewport } from 'hooks';\r\nimport prerender from 'utils/prerender';\r\nimport { blurOnMouseUp } from 'utils/focus';\r\nimport { ReactComponent as ArrowLeft } from 'assets/arrow-left.svg';\r\nimport { ReactComponent as ArrowRight } from 'assets/arrow-right.svg';\r\nimport { vertex, fragment } from './carouselShader';\r\nimport { cleanScene, cleanRenderer } from 'utils/three';\r\nimport { getImageFromSrcSet } from 'utils/image';\r\nimport './index.css';\r\n\r\nfunction determineIndex(imageIndex, index, images, direction) {\r\n  if (index !== null) return index;\r\n  const length = images.length;\r\n  const prevIndex = (imageIndex - 1 + length) % length;\r\n  const nextIndex = (imageIndex + 1) % length;\r\n  const finalIndex = direction > 0 ? nextIndex : prevIndex;\r\n  return finalIndex;\r\n}\r\n\r\nconst Carousel = ({ width, height, images, placeholder, ...rest }) => {\r\n  const [dragging, setDragging] = useState(false);\r\n  const [imageIndex, setImageIndex] = useState(0);\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [showPlaceholder, setShowPlaceholder] = useState(true);\r\n  const [textures, setTextures] = useState();\r\n  const [canvasRect, setCanvasRect] = useState();\r\n  const canvas = useRef();\r\n  const imagePlane = useRef();\r\n  const geometry = useRef();\r\n  const material = useRef();\r\n  const scene = useRef();\r\n  const camera = useRef();\r\n  const renderer = useRef();\r\n  const animating = useRef(false);\r\n  const swipeDirection = useRef();\r\n  const lastSwipePosition = useRef();\r\n  const scheduledAnimationFrame = useRef();\r\n  const prefersReducedMotion = usePrefersReducedMotion();\r\n  const inViewport = useInViewport(canvas, true);\r\n  const placeholderRef = useRef();\r\n  const springTween = useRef();\r\n  const swipeElement = useRef();\r\n\r\n  const currentImageAlt = `Slide ${imageIndex + 1} of ${images.length}. ${\r\n    images[imageIndex].alt\r\n  }`;\r\n\r\n  useEffect(() => {\r\n    if (dragging) {\r\n      document.body.style.cursor = 'grabbing';\r\n    }\r\n\r\n    return () => {\r\n      document.body.style.cursor = '';\r\n    };\r\n  }, [dragging]);\r\n\r\n  useEffect(() => {\r\n    const cameraOptions = [width / -2, width / 2, height / 2, height / -2, 1, 1000];\r\n    renderer.current = new WebGLRenderer({\r\n      canvas: canvas.current,\r\n      antialias: false,\r\n      powerPreference: 'high-performance',\r\n    });\r\n    camera.current = new OrthographicCamera(...cameraOptions);\r\n    scene.current = new Scene();\r\n    renderer.current.setPixelRatio(2);\r\n    renderer.current.setClearColor(0x111111, 1.0);\r\n    renderer.current.setSize(width, height);\r\n    renderer.current.domElement.style.width = '100%';\r\n    renderer.current.domElement.style.height = 'auto';\r\n    scene.current.background = new Color(0x111111);\r\n    camera.current.position.z = 1;\r\n\r\n    return () => {\r\n      animating.current = false;\r\n      cleanScene(scene.current);\r\n      cleanRenderer(renderer.current);\r\n    };\r\n  }, [height, width]);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n\r\n    const loadImages = async () => {\r\n      const textureLoader = new TextureLoader();\r\n      const anisotropy = renderer.current.capabilities.getMaxAnisotropy();\r\n\r\n      const texturePromises = images.map(async image => {\r\n        const imageSrc = await getImageFromSrcSet(image);\r\n        const imageTexture = await textureLoader.loadAsync(imageSrc);\r\n        await renderer.current.initTexture(imageTexture);\r\n        imageTexture.encoding = sRGBEncoding;\r\n        imageTexture.minFilter = LinearFilter;\r\n        imageTexture.magFilter = LinearFilter;\r\n        imageTexture.anisotropy = anisotropy;\r\n        imageTexture.generateMipmaps = false;\r\n        return imageTexture;\r\n      });\r\n\r\n      const textures = await Promise.all(texturePromises);\r\n\r\n      // Cancel if the component has unmounted during async code\r\n      if (!mounted) return;\r\n\r\n      material.current = new ShaderMaterial({\r\n        uniforms: {\r\n          dispFactor: { type: 'f', value: 0 },\r\n          direction: { type: 'f', value: 1 },\r\n          currentImage: { type: 't', value: textures[0] },\r\n          nextImage: { type: 't', value: textures[1] },\r\n        },\r\n        vertexShader: vertex,\r\n        fragmentShader: fragment,\r\n        transparent: false,\r\n        opacity: 1,\r\n      });\r\n\r\n      geometry.current = new PlaneBufferGeometry(width, height, 1);\r\n      imagePlane.current = new Mesh(geometry.current, material.current);\r\n      imagePlane.current.position.set(0, 0, 0);\r\n      scene.current.add(imagePlane.current);\r\n\r\n      setLoaded(true);\r\n      setTextures(textures);\r\n\r\n      requestAnimationFrame(() => {\r\n        renderer.current.render(scene.current, camera.current);\r\n      });\r\n    };\r\n\r\n    if (inViewport && !loaded) {\r\n      loadImages();\r\n    }\r\n\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  }, [height, images, inViewport, loaded, width]);\r\n\r\n  const goToIndex = useCallback(\r\n    ({ index, direction = 1 }) => {\r\n      if (!textures) return;\r\n      setImageIndex(index);\r\n      const uniforms = material.current.uniforms;\r\n      uniforms.nextImage.value = textures[index];\r\n      uniforms.direction.value = direction;\r\n\r\n      const onComplete = () => {\r\n        uniforms.currentImage.value = textures[index];\r\n        uniforms.dispFactor.value = 0;\r\n        animating.current = false;\r\n      };\r\n\r\n      if (!prefersReducedMotion && uniforms.dispFactor.value !== 1) {\r\n        animating.current = true;\r\n\r\n        const springValue = value(uniforms.dispFactor.value, value => {\r\n          uniforms.dispFactor.value = value;\r\n          if (value === 1) onComplete();\r\n        });\r\n\r\n        springTween.current = spring({\r\n          from: springValue.get(),\r\n          to: 1,\r\n          velocity: springValue.getVelocity(),\r\n          stiffness: 100,\r\n          damping: 20,\r\n        }).start(springValue);\r\n      } else {\r\n        onComplete();\r\n        requestAnimationFrame(() => {\r\n          renderer.current.render(scene.current, camera.current);\r\n        });\r\n      }\r\n    },\r\n    [prefersReducedMotion, textures]\r\n  );\r\n\r\n  const navigate = useCallback(\r\n    ({ direction, index = null, ...rest }) => {\r\n      if (!loaded) return;\r\n\r\n      if (animating.current) {\r\n        cancelAnimationFrame(scheduledAnimationFrame.current);\r\n        scheduledAnimationFrame.current = requestAnimationFrame(() =>\r\n          navigate({ direction, index, ...rest })\r\n        );\r\n        return;\r\n      }\r\n\r\n      const finalIndex = determineIndex(imageIndex, index, textures, direction);\r\n      goToIndex({ index: finalIndex, direction: direction, ...rest });\r\n    },\r\n    [goToIndex, imageIndex, loaded, textures]\r\n  );\r\n\r\n  const onNavClick = useCallback(\r\n    index => {\r\n      if (index === imageIndex) return;\r\n      const direction = index > imageIndex ? 1 : -1;\r\n      navigate({ direction, index });\r\n    },\r\n    [imageIndex, navigate]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      const rect = canvas.current.getBoundingClientRect();\r\n      setCanvasRect(rect);\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    handleResize();\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let animation;\r\n\r\n    const animate = () => {\r\n      animation = requestAnimationFrame(animate);\r\n      if (animating.current) {\r\n        renderer.current.render(scene.current, camera.current);\r\n      }\r\n    };\r\n\r\n    animation = requestAnimationFrame(animate);\r\n\r\n    return () => {\r\n      cancelAnimationFrame(animation);\r\n      springTween.current?.stop();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (placeholder) {\r\n      const purgePlaceholder = () => {\r\n        setShowPlaceholder(false);\r\n      };\r\n\r\n      const placeholderElement = placeholderRef.current;\r\n      placeholderElement.addEventListener('transitionend', purgePlaceholder);\r\n\r\n      return () => {\r\n        if (placeholderElement) {\r\n          placeholderElement.removeEventListener('transitionend', purgePlaceholder);\r\n        }\r\n      };\r\n    }\r\n  }, [placeholder]);\r\n\r\n  const onSwipeMove = useCallback(\r\n    position => {\r\n      if (animating.current || !material.current || !textures) return;\r\n      const { x } = position;\r\n      lastSwipePosition.current = x;\r\n      const absoluteX = Math.abs(x);\r\n      const containerWidth = canvasRect.width;\r\n      swipeDirection.current = x > 0 ? -1 : 1;\r\n      const swipePercentage = 1 - ((absoluteX - containerWidth) / containerWidth) * -1;\r\n      const nextIndex = determineIndex(imageIndex, null, images, swipeDirection.current);\r\n      const uniforms = material.current.uniforms;\r\n      const displacementClamp = Math.min(Math.max(swipePercentage, 0), 1);\r\n\r\n      uniforms.currentImage.value = textures[imageIndex];\r\n      uniforms.nextImage.value = textures[nextIndex];\r\n      uniforms.direction.value = swipeDirection.current;\r\n\r\n      if (!prefersReducedMotion) {\r\n        uniforms.dispFactor.value = displacementClamp;\r\n      }\r\n\r\n      requestAnimationFrame(() => {\r\n        renderer.current.render(scene.current, camera.current);\r\n      });\r\n    },\r\n    [canvasRect, imageIndex, images, prefersReducedMotion, textures]\r\n  );\r\n\r\n  const onSwipeEnd = useCallback(() => {\r\n    if (!material.current) return;\r\n    const uniforms = material.current.uniforms;\r\n    const duration = (1 - uniforms.dispFactor.value) * 1000;\r\n    const position = Math.abs(lastSwipePosition.current);\r\n    const minSwipeDistance = canvasRect.width * 0.2;\r\n    lastSwipePosition.current = 0;\r\n\r\n    if (animating.current) return;\r\n    if (position === 0 || !position) return;\r\n\r\n    if (position > minSwipeDistance) {\r\n      navigate({\r\n        duration,\r\n        direction: swipeDirection.current,\r\n      });\r\n    } else {\r\n      uniforms.currentImage.value = uniforms.nextImage.value;\r\n      uniforms.nextImage.value = uniforms.currentImage.value;\r\n      uniforms.dispFactor.value = 1 - uniforms.dispFactor.value;\r\n\r\n      navigate({\r\n        direction: swipeDirection.current * -1,\r\n        index: imageIndex,\r\n      });\r\n    }\r\n  }, [canvasRect, imageIndex, navigate]);\r\n\r\n  useEffect(() => {\r\n    let pointerTracker;\r\n\r\n    const swipeXY = value({ x: 0, y: 0 }, position => {\r\n      onSwipeMove(position);\r\n    });\r\n\r\n    const swipeStart = listen(swipeElement.current, 'mousedown touchstart').start(\r\n      event => {\r\n        setDragging(true);\r\n        event.preventDefault();\r\n        pointerTracker = pointer({ x: 0, y: 0 }).start(swipeXY);\r\n      }\r\n    );\r\n\r\n    const swipeEnd = listen(document, 'mouseup touchend').start(() => {\r\n      setDragging(false);\r\n      onSwipeEnd();\r\n      pointerTracker?.stop();\r\n    });\r\n\r\n    return () => {\r\n      swipeStart.stop();\r\n      swipeEnd.stop();\r\n      pointerTracker?.stop();\r\n    };\r\n  }, [onSwipeEnd, onSwipeMove]);\r\n\r\n  const handleKeyDown = event => {\r\n    const actions = {\r\n      ArrowRight: () => navigate({ direction: 1 }),\r\n      ArrowLeft: () => navigate({ direction: -1 }),\r\n    };\r\n\r\n    const selectedAction = actions[event.key];\r\n\r\n    if (!!selectedAction) {\r\n      selectedAction();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"carousel\" onKeyDown={handleKeyDown} {...rest}>\r\n      <div className=\"carousel__content\">\r\n        <div\r\n          className={classNames('carousel__image-wrapper', {\r\n            'carousel__image-wrapper--dragging': dragging,\r\n          })}\r\n          ref={swipeElement}\r\n        >\r\n          <div\r\n            aria-atomic\r\n            className=\"carousel__canvas-wrapper\"\r\n            aria-live=\"polite\"\r\n            aria-label={currentImageAlt}\r\n            role=\"img\"\r\n          >\r\n            <canvas aria-hidden className=\"carousel__canvas\" ref={canvas} />\r\n          </div>\r\n          {showPlaceholder && placeholder && (\r\n            <img\r\n              aria-hidden\r\n              className={classNames('carousel__placeholder', {\r\n                'carousel__placeholder--loaded': !prerender && loaded && textures,\r\n              })}\r\n              src={placeholder}\r\n              ref={placeholderRef}\r\n              alt=\"\"\r\n              role=\"presentation\"\r\n            />\r\n          )}\r\n        </div>\r\n        <button\r\n          className=\"carousel__button carousel__button--prev\"\r\n          aria-label=\"Previous slide\"\r\n          onClick={() => navigate({ direction: -1 })}\r\n          onMouseUp={blurOnMouseUp}\r\n        >\r\n          <ArrowLeft />\r\n        </button>\r\n        <button\r\n          className=\"carousel__button carousel__button--next\"\r\n          aria-label=\"Next slide\"\r\n          onClick={() => navigate({ direction: 1 })}\r\n          onMouseUp={blurOnMouseUp}\r\n        >\r\n          <ArrowRight />\r\n        </button>\r\n      </div>\r\n      <div className=\"carousel__nav\">\r\n        {images.map((image, index) => (\r\n          <button\r\n            className=\"carousel__nav-button\"\r\n            key={image.alt}\r\n            onClick={() => onNavClick(index)}\r\n            onMouseUp={blurOnMouseUp}\r\n            aria-label={`Jump to slide ${index + 1}`}\r\n            aria-pressed={index === imageIndex}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Carousel;\r\n","export const vertex = `\r\n  varying vec2 vUv;\r\n  void main() {\r\n    vUv = uv;\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n  }\r\n`;\r\n\r\nexport const fragment = `\r\n  varying vec2 vUv;\r\n  uniform sampler2D currentImage;\r\n  uniform sampler2D nextImage;\r\n  uniform float dispFactor;\r\n  uniform float direction;\r\n\r\n  void main() {\r\n    vec2 uv = vUv;\r\n    vec4 _currentImage;\r\n    vec4 _nextImage;\r\n    float intensity = 0.6;\r\n\r\n    vec4 orig1 = texture2D(currentImage, uv);\r\n    vec4 orig2 = texture2D(nextImage, uv);\r\n\r\n    vec2 distortedPosition = vec2(\r\n      uv.x + direction * (dispFactor * (orig2.r * intensity)),\r\n      uv.y + direction * (dispFactor * (orig2 * intensity))\r\n    );\r\n\r\n    vec2 distortedPosition2 = vec2(\r\n      uv.x - direction * ((1.0 - dispFactor) * (orig1.r * intensity)),\r\n      uv.y - direction * ((1.0 - dispFactor) * (orig1 * intensity))\r\n    );\r\n\r\n    _currentImage = texture2D(currentImage, distortedPosition);\r\n    _nextImage = texture2D(nextImage, distortedPosition2);\r\n\r\n    vec4 finalTexture = mix(_currentImage, _nextImage, dispFactor);\r\n    gl_FragColor = finalTexture;\r\n  }\r\n`;\r\n"],"sourceRoot":""}